1. Dọn dẹp cache và chạy lại dự án:
npm cache clean --force
ng serve --open
2. error:Property '...' has no initializer and is not definitely assigned in the constructor:
 tsconfig.json:     "strictPropertyInitialization": false,
3.Tạo Component: 
ng g c component-name
4.Tạo Service:
ng g s service-name
5.Tạo Module:
ng g m module-name
6.Tạo Directive:
ng g d directive-name
7.Tạo Environment
8.
You need to make sure you have the @angular/localize package first:
npm install @angular/localize --save
Then, import '@angular/localize/init' in your polyfills.ts file just like the error says
9. thêm [innerHTML] khi sử dụng Rich Text Editor của ej2s
10. cách customize teamplate từ shared thì làm như sau:
  @Input() historyTemplate!:TemplateRef<any>;
 *ngTemplateOutlet="historyTemplate ? historyTemplate :NodeHistory; context: { $implicit: node }"
 <codx-tree-comment [objectID]="data['recID']" [actionType]="'C'" [addNew]="true" [historyTemplate]="historyTemplateCmt" >
  </codx-tree-comment>
11. cách debug data của angulat
<ng-template #historyTemplateCmt let-data>
<p (click)="showData(data)">DUng đây</p>
</ng-template>
  showData(dt){
    debugger
  }

12. Khi trong hàm thiếu 1 sự kiện gì(ví dụ hiện thị dữ liệu lên view thì ta chỉ việc lấy được dữ liệu ra và đồng thời khai báo các biến rồi thực hiện thêm vào và lấy hiện thị dữ liệu thôi)
   onDoubleClick(e: any) {
    const modifiedEvent = {
      type: 'doubleClick',
      rowData: {
        taskData: e,
      },
    };

    switch (modifiedEvent.type) {
      case 'doubleClick':
        if (modifiedEvent.rowData) {
          this.view.dataService.dataSelected = modifiedEvent.rowData.taskData;
          this.viewTasks();
        }
        break;
    }
  }
13. Cách thêm điều kiện trong html mà không làm thay đổi css khi đã được định nghĩa là thêm vào thẻ <ng-container>
14. Cách sửa lối css khi có điều kiện if bị false và có thẻ for bọc bên ngoài thì ta sử dụng như sau:
     html : <div class="history-details" [class.history-details-active]="item.comment !== null" *ngFor="let item of filteredHistory">
            <ng-container *ngIf="item.comment !== null">
     css:    .history-details {
                 &.history-details-active {
                  .......
              }
15. Cách thực hiện thêm điều kiện hàm vào teampleate chung thì thực hiện truyền 1 biến (boolean) vào if else 
    checkhistory : boolean = boolean
    componenet con :*ngIf="checkhistory ?...hàm....."
    componenet cha : checkhistory="true/false"

16. Design Pattern trong Angular: 
 - Dependency Injection (DI): Mục đích là quản lý các dependencies (service) và cung cấp chúng tự động cho các component như vậy sẽ giảm sự phụ thuộc giữa các component.
   + ex:Bạn đi ăn nhà hàng, nhà hàng (Class A) không cần tự nấu món ăn, mà được bếp (Class B) cung cấp món ăn.
   + @Injectable()
       class UserComponent {
           constructor(private userService: UserService) {} // Được inject vào
           
           getUsers() {
               return this.userService.getUsers();
           }
       }
  - Singleton Pattern:Đảm bảo chỉ một instance duy nhất của service tồn tại trong ứng dụng.
  + Trong một công ty chỉ có một giám đốc điều hành(thích hợp cho lưu trạng thái đăng nhập, cache dữ liệu.)
- Observable Pattern (RxJS):Sử dụng Observable và Subject từ thư viện RxJS để quản lý luồng dữ liệu.
   Có 2 thành phần chính:
     Observable (nguồn dữ liệu thay đổi liên tục)
     Observer (người đăng ký lắng nghe dữ liệu thay đổi)
     Khi Observable phát dữ liệu (next()), tất cả Observer sẽ nhận được thông báo.
     Dùng trong giao tiếp giữa các component, quản lý sự kiện, gọi API, WebSocket.
     Giao tiếp giữa các components
     Xử lý HTTP requests
     Xử lý events (click, input, etc.)
  + Kênh YouTube - Người xem (Subscriber) sẽ nhận được thông báo khi có video mới (Publisher)
- Component-Based Architecture
Mục đích: Chia UI thành các component độc lập, tái sử dụng.
Ví dụ: Tạo component ButtonComponent:
@Component({
  selector: 'app-button',
  template: `<button [class]="type">{{ label }}</button>`,
})
export class ButtonComponent {
  @Input() label: string = 'Click me!';
  @Input() type: 'primary' | 'secondary' = 'primary';
}  
