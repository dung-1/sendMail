https://studyarts.techzen.vn/#/home/curriculum/lesson?outlineInfo=%7B%22courseId%22%3A7102,%22courseName%22%3A%22Tr%E1%BA%A3i%20Nghi%E1%BB%87m%20Spring%20Boot%22,%22activeID%22%3A921936,%22redirectType%22%3A0%7D&isManagerCourse
1. so sáng == và equals : 2 toán tử này đều so sánh nhưng nó khác nhau trong khi "==" thực hiện so sánh ĐỊA CHỈ Ô NHỚ, còn "equals" nó lại so sánh GIÁ TRỊ

 - VÍ DỤ: String s1 = "hello"; và String s2 = "hello";, kết quả so sánh sẽ là:
          s1 == s2 sẽ trả về true.
          s1.equals(s2) cũng sẽ trả về true.
   =>   Quy tắc vàng: Khi so sánh nội dung của hai chuỗi trong Java, luôn luôn sử dụng phương thức .equals() để tránh các lỗi logic không mong muốn.
2. try-catch-finally và throws là hai cơ chế cốt lõi để quản lý lỗi (exceptions):
  - try-catch-finally: Dùng để chủ động xử lý một ngoại lệ ngay tại nơi nó có thể xảy ra (nó là người sẽ thực hiện xử lý lỗi luôn tại thời điểm chạy chương trình)
  - throws: Dùng để khai báo rằng một phương thức có thể ném ra ngoại lệ, đẩy trách nhiệm xử lý cho phương thức gọi nó.(nó chỉ bắt lỗi chứ không thực hiện sửa lỗi , nếu không sửa lỗi thì khi lỗi hệ thống sẽ dừng hoạt động)
3. Generics là một tính năng trong Java cho phép các lớp, giao diện và phương thức hoạt động với các kiểu dữ liệu khác nhau (như String, Integer,...) một cách an toàn và tổng quát hơn, thay vì phải chỉ định một kiểu dữ liệu cụ thể.
Kiểm tra kiểu dữ liệu tại thời điểm biên dịch, Loại bỏ ép kiểu tường minh, Tái sử dụng code
   ví dụ : List <String> list = new ArrayList<String>(); // Chỉ định kiểu dữ liệu là String
           list.add("hello");
           String s = list.get(0); // Không cần ép kiểu
4. Stream API: Stream trong Java nó giống như Linq Trong .Net (Nhưng Stream API phạm vi giới hạn hơn, nó là thao tác cuối cùng hay còn gọi là tính toán lười biếng).
5.  IoC là nguyên tắc "đảo ngược quyền kiểm soát"  và  DI là cách thức cụ thể để thực hiện nguyên tắc đó, bằng cách "tiêm" các đối tượng phụ thuộc vào nhau từ bên ngoài.( câu chuyện ông sửa xe và người chủ xe đem xe đi sửa hoặc chiếc công tắc điện
và chiếu máy xay sinh tố - nếu không tiêm công tắc vào thì máy xay không hoạt động)
6. @Bean là một annotation trong Spring Framework, được sử dụng để khai báo rằng một phương thức sẽ tạo ra, cấu hình, và khởi tạo một Spring Bean. Annotation này thường được sử dụng trong các lớp được đánh dấu bởi @Configuration . Được dùng 
để Khi bạn cần cấu hình một bean của một lớp bên thứ ba, Khi bạn cần tạo ra một đối tượng phức tạp, Khi bạn muốn có nhiều hơn một bean cùng loại(riêng biệt) 
7. So sánh @Controller và @ResController
                                                  @Controller	                                                                 @RestController
                      Mục đích	             Xử lý các request và trả về View (trang HTML, JSP).                 	Xử lý các request và trả về dữ liệu thô (JSON, XML).
                      Bao gồm	              Chỉ có @Controller.                                                  Là sự kết hợp của @Controller và @ResponseBody.
                      Cách dùng	            Dùng cho các ứng dụng web truyền thống.	                              Dùng cho các dịch vụ web RESTful API.
8. Path Variable & Request Param 
